<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>windows快捷操作</title>
    <url>/2022/05/03/windows-kuai-jie-cao-zuo/</url>
    <content><![CDATA[<p>1.打开服务面板 ： services.msc</p>
<p>2.打开运行面板：windos + R</p>
<p>3.打开任务管理器： ctrl+shfit+esc/taskmgr</p>
<p>4.所有窗口最小化：Win+D</p>
<p>5.打开“开始”菜单： ESC+ctrl</p>
<p>6.快速切换到某个窗口：alt+tab</p>
<p>7.快速关闭浏览器窗口：ctrl+W</p>
<p>8.在浏览器的所有窗口快速来回切换：ctrl+tab</p>
<p>9.打开资源管理器：win+E</p>
<p>10.清屏：cls</p>
<p>11.cmd: win+R然后输入cmd</p>
<p>12.注册表：regedit</p>
<p>13.计算器：clac</p>
<p>14.远程桌面连接：mstsc</p>
<p>15.ODBC数据源管理器：odbcad32</p>
<p>16.计算机管理：compmgmt.msc</p>
<p>17.系统配置：msconfig</p>
<p>18.磁盘管理：diskmgmt.msc</p>
<p>19.控制面板:control</p>
<p>20.测试网络是否通：ping</p>
<p>21.测试是否开放某个端口：telnet [域名或者IP] [端口]</p>
<p>22.测试网络路由：<strong>tracert</strong> </p>
<p>23.查看与配置网络：<strong>ipconfig</strong></p>
<p>24.查看本机DNS服务器/域名ip地址解析：<strong>nslookup</strong></p>
<p>25.打开记事本：notepad</p>
<p>26.组策略：gpedit.msc</p>
<p>27.60秒倒计时关机命令：shutdown</p>
<p>28.打开资源管理器：explorer</p>
<p>29.证书管理：certmgr.msc</p>
<p>30.启动字符映射表:charmap</p>
<p>31.磁盘碎片整理：dfrg.msc</p>
<p>32.屏幕分辨率：desk.cpl</p>
<p>33.Windows防火墙：firewall.cpl</p>
<p>34.共享文件夹管理器:fsmgmt.msc</p>
<p>35.设备管理器:hdwwiz.cpl/devmgmt.msc</p>
<p>36.注销命令：logoff</p>
<p>37.声音：mmsys.cpl</p>
<p>38.放大镜实用程序：magnify</p>
<p>39.显示内存使用情况：mem.exe</p>
<p>40.打开控制台：mmc</p>
<p>41.程序和功能：appwiz.cpl</p>
<p>42.系统信息：msinfo32</p>
<p>43.画图：mspaint</p>
<p>44.网络连接：ncpa.cpl</p>
<p>45.打开记事本：notepad：</p>
<p>46.计算机性能监测器：perfmon</p>
<p>47.电源选项：powercfg.cpl</p>
<p>48.系统还原：rstrui</p>
<p>49.本地安全策略：secpol.msc</p>
<p>50.Windows激活，查看系统激活信息：slui</p>
<p>51.截图工具，支持无规则截图：snippingtool</p>
<p>52.系统属性：sysdm.cpl</p>
<p>53.日期和时间：timedate.cpl</p>
<p>54.写字板：write</p>
<p>55.垃圾整理：cleanmgr</p>
<p>56.无线连接：Irprops.cpl</p>
<p>57.关于Windows：winver</p>
<p>58.检查DirectX信息:dxdiag</p>
<p>59.系统组件服务:dcomcnfg</p>
<p>60.事件查看器:eventvwr</p>
<p>61.打开屏幕键盘:osk</p>
<p>62.音量控制程序:sndvol</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+github搭建个人博客</title>
    <url>/2022/03/12/hexo-github-da-jian-ge-ren-bo-ke/</url>
    <content><![CDATA[<h2 id="1-安装node-js"><a href="#1-安装node-js" class="headerlink" title="1.安装node.js"></a>1.安装node.js</h2><p>下载地址：</p>
<p>[Node.js]: </p>
<p>检查是否安装成功：</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">C:\Users\vico&gt;node <span class="token operator">-</span>v
v16<span class="token punctuation">.</span>14<span class="token punctuation">.</span>0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h2><p>下载地址：</p>
<p>​    检查是否安装成功</p>
<p>​        右键菜单出现Git Bash Here说明安装成功</p>
<p>安装：hexo-deployer-git</p>
<pre class="line-numbers language-none"><code class="language-none">$ npm install hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>



<h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2><p>安装</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">C:\Users\vico&gt;npm install <span class="token operator">-</span>g hexo-<span class="token function">cli</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    安装完成后进入想存放blog的目录右键Git Bash Here</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token comment">## 建站</span>
$ hexo init blog
INFO  Cloning hexo-starter https:<span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com/hexojs/hexo-starter<span class="token punctuation">.</span>git
INFO  Install dependencies
INFO  <span class="token function">Start</span> blogging with Hexo!
$ cd blog
$ npm install
<span class="token comment">## 生成静态文件</span>
$ npm g
<span class="token comment">## 启动服务</span>
$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    </p>
<h2 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4.更换主题"></a>4.更换主题</h2><p>主题地址：</p>
<p>点击选中的主题跳转到Github可以选择下载成zip解压到theme目录下</p>
<p>或者在theme目录下执行git clone(git和先和github关联起来)</p>
<pre class="line-numbers language-none"><code class="language-none">$ git clone git@github.com:XPoet/hexo-theme-keep.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    打开_config.yml找到theme修改为下载主题的名字</p>
<p>​        theme: hexo-theme-keep</p>
<h2 id="5-关联Github"><a href="#5-关联Github" class="headerlink" title="5.关联Github"></a>5.关联Github</h2><p>​    登录个人Github点击New repository填好仓库名点击 Create repository</p>
<p>   复制新建仓库的地址然后打开_config.yml配置如下</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">deploy</span><span class="token punctuation">:</span>
<span class="token attr-name">  type</span><span class="token punctuation">:</span> <span class="token attr-value">'git'</span>
<span class="token attr-name">  repo</span><span class="token punctuation">:</span> <span class="token attr-value">https://github.com/VicoSong/vico.github.io.git</span>
<span class="token attr-name">  branch</span><span class="token punctuation">:</span> <span class="token attr-value">master</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>打开命令行输入：</p>
<pre class="line-numbers language-none"><code class="language-none">$ hexo g
$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>访问 ：<a href="https://github.com/VicoSong/vico.github.io.git%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E6%95%88%E6%9E%9C">https://github.com/VicoSong/vico.github.io.git可以看到效果</a></p>
<p>参考：</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾收集器介绍</title>
    <url>/2022/05/06/la-ji-shou-ji-qi-jie-shao/</url>
    <content><![CDATA[<h2 id="1-查看使用的何种垃圾收集器"><a href="#1-查看使用的何种垃圾收集器" class="headerlink" title="1.查看使用的何种垃圾收集器"></a>1.查看使用的何种垃圾收集器</h2><p><strong>方法一</strong></p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">D:\app\Java\jdk11\bin&gt;java <span class="token operator">-</span>XX:<span class="token operator">+</span>PrintCommandLineFlags <span class="token operator">-</span>version
<span class="token operator">-</span>XX:G1ConcRefinementThreads=13 <span class="token operator">-</span>XX:GCDrainStackTargetSize=64 <span class="token operator">-</span>XX:InitialHeapSize=257905728 <span class="token operator">-</span>XX:MaxHeapSize=4126491648 <span class="token operator">-</span>XX:<span class="token operator">+</span>PrintCommandLineFlags <span class="token operator">-</span>XX:ReservedCodeCacheSize=251658240 <span class="token operator">-</span>XX:<span class="token operator">+</span>SegmentedCodeCache <span class="token operator">-</span>XX:<span class="token operator">+</span>UseCompressedClassPointers <span class="token operator">-</span>XX:<span class="token operator">+</span>UseCompressedOops <span class="token operator">-</span>XX:<span class="token operator">+</span>UseG1GC <span class="token operator">-</span>XX:<span class="token operator">-</span>UseLargePagesIndividualAllocation
java version <span class="token string">"11"</span> 2018-09-25
Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment 18<span class="token punctuation">.</span>9 <span class="token punctuation">(</span>build 11+28<span class="token punctuation">)</span>
Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> 64-Bit Server VM 18<span class="token punctuation">.</span>9 <span class="token punctuation">(</span>build 11+28<span class="token punctuation">,</span> mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p><strong>方法二</strong></p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">D:\app\Java\jdk11\bin&gt;java <span class="token operator">-</span>XX:<span class="token operator">+</span>PrintFlagsFinal <span class="token operator">-</span>version
<span class="token namespace">[Global flags]</span>
 bool UseG1GC             = true                     <span class="token punctuation">{</span>product<span class="token punctuation">}</span> <span class="token punctuation">{</span>ergonomic<span class="token punctuation">}</span>
java version <span class="token string">"11"</span> 2018-09-25
Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment 18<span class="token punctuation">.</span>9 <span class="token punctuation">(</span>build 11+28<span class="token punctuation">)</span>
Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> 64-Bit Server VM 18<span class="token punctuation">.</span>9 <span class="token punctuation">(</span>build 11+28<span class="token punctuation">,</span> mixed mode<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>方法三</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">GarbageCollectorMXBean</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>management<span class="token punctuation">.</span></span><span class="token class-name">ManagementFactory</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> x <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GarbageCollectorMXBean</span><span class="token punctuation">&gt;</span></span> l <span class="token operator">=</span> <span class="token class-name">ManagementFactory</span><span class="token punctuation">.</span><span class="token function">getGarbageCollectorMXBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">GarbageCollectorMXBean</span> b <span class="token operator">:</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>方法四</strong>:Java进程正在运行的情况下</p>
<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">D:\app\Java\jdk1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_162\bin&gt;jps
11408 TestJmap
33076 Eclipse
27324 Jps

D:\app\Java\jdk1<span class="token punctuation">.</span>8<span class="token punctuation">.</span>0_162\bin&gt;jmap <span class="token operator">-</span>heap 11408
Attaching to <span class="token keyword">process</span> ID 11408<span class="token punctuation">,</span> please wait<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
Debugger attached successfully<span class="token punctuation">.</span>
Server compiler detected<span class="token punctuation">.</span>
JVM version is 25<span class="token punctuation">.</span>162-b12

<span class="token keyword">using</span> thread-local object allocation<span class="token punctuation">.</span>
<span class="token keyword">Parallel</span> <span class="token function">GC</span> with 13 thread<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="2-XX：UseParallelGC解释"><a href="#2-XX：UseParallelGC解释" class="headerlink" title="2.-XX：UseParallelGC解释"></a>2.<a href="http://codewenda.com/xx%EF%BC%9Auseparallelgc%E5%92%8C-xx%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A-useparnewgc/">-XX：UseParallelGC</a>解释</h2><p>引用《深入理解Java虚拟机：JVM高级特性与最佳实践》的介绍:</p>
<p><img src="https://s2.loli.net/2022/05/06/ePFS3tdLTVUcXZz.png" alt="lajishoujixiangguancanshu"></p>
<p>表示使用的垃圾收集器是：新生代（Parallel Scavenge），老年代（Ps MarkSweep）组合。</p>
<p>jdk1.7 默认垃圾收集器Parallel Scavenge（新生代）+Parallel Old（老年代）</p>
<p>jdk1.8 默认垃圾收集器Parallel Scavenge（新生代）+Parallel Old（老年代）</p>
<p>jdk1.9 默认垃圾收集器G1</p>
<h2 id="3-JVM中的垃圾收集器"><a href="#3-JVM中的垃圾收集器" class="headerlink" title="3.JVM中的垃圾收集器"></a>3.JVM中的垃圾收集器</h2><p><img src="https://s2.loli.net/2022/05/06/1B2LAM7RPUJbW5i.png" alt="gcollector"><br>图中展示了7种作用于不同分代的收集器，如果两个收集器之间存在连线，则说明它们可以搭配使用。虚拟机所处的区域则表示它是属于新生代还是老年代收集器。<br>新生代收集器（全部的都是复制算法）：Serial、ParNew、Parallel Scavenge<br>老年代收集器：CMS（标记-清理）、Serial Old（标记-整理）、Parallel Old（标记整理）<br>整堆收集器： G1（一个Region中是标记-清除算法，2个Region之间是复制算法）<br><strong>垃圾收集器中“并发”和“并行”的概念</strong>：<br>1，<strong>并行（Parallel）</strong>：<strong>同一时间有多条这样的线程在协同工作</strong>，通常默认此时用户线程是处于等待状态。<br>2，<strong>并发（Concurrent）</strong>：<strong>同一时间垃圾收集器线程与用户线程都在运行</strong>。</p>
<p><strong>吞吐量（Throughput）概念</strong></p>
<p><strong>吞吐量</strong>：CPU用于运行用户代码的时间与CPU总消耗时间的比值，即<strong>吞吐量 = 运行用户代码时间 /（运行用户代码时间 + 垃圾收集时间）</strong>。</p>
<h3 id="1-Serial收集器"><a href="#1-Serial收集器" class="headerlink" title="1.Serial收集器"></a>1.Serial收集器</h3><p>Serial收集器是最基本的、发展历史最悠久的收集器。</p>
<p><strong>特点：</strong></p>
<ul>
<li>客户端模式下的默认新生代收集器</li>
<li>单线程工作（它的“单线程”的意义并不仅仅是说明它<strong>只会使用一个处理器或一条收集线程</strong>去完成垃圾收集工作，更重要的是强调在它进行垃圾收集时，<strong>必须暂停其他所有工作线程</strong>，直到它收集结束）</li>
<li>简单而高效（与其他收集器的单线程相比）</li>
<li>对于内存资源受限的环境， 它是所有收集器里额外内存消耗（Memory Footprint）最小的</li>
<li>对于单核处理器或处理器核心数较少的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率</li>
</ul>
<p><strong>应用场景</strong>：适用于Client模式下的虚拟机。<br><strong>Serial / Serial Old收集器运行示意图</strong><br><img src="https://s2.loli.net/2022/05/06/9WZCBSvKyzsQO2X.png"></p>
<h3 id="2-ParNew收集器"><a href="#2-ParNew收集器" class="headerlink" title="2.ParNew收集器"></a>2.ParNew收集器</h3><p>Serial收集器的<strong>多线程并行版本</strong>除了使用多线程外其余行为均和Serial收集器一模一样（参数控制、收集算法、Stop The World、对象分配规则、回收策略等）。<br>    <strong>特点：</strong></p>
<ul>
<li>JDK 7之前在<strong>服务端模式下首选的新生代收集器</strong>（一个重要原因：除了Serial收集器外， 目前只有它能与 CMS 收集器配合工作）</li>
<li>ParNew收集器是激活CMS后（使用<code>-XX: +UseConcMarkSweepGC</code>选项） 的默认新生代收集器，也可以使用<code>-XX: +/-UseParNewGC</code>选项来强制指定或者禁用它。</li>
<li>ParNew收集器在<strong>单核心处理器</strong>的环境中绝对不会有比Serial收集器更好的效果</li>
<li>默认开启的收集线程数与处理器核心数量相同（可以使用<code>-XX: ParallelGCThreads</code>参数来限制垃圾收集的线程数）</li>
</ul>
<p><em>ParNew/Serial Old组合收集器运行示意图如下：</em><br><img src="https://s2.loli.net/2022/05/06/6S18coj7gV3Pqhs.png"></p>
<h3 id="3-Parallel-Scavenge-收集器"><a href="#3-Parallel-Scavenge-收集器" class="headerlink" title="3.Parallel Scavenge 收集器"></a>3.Parallel Scavenge 收集器</h3><p>Parallel Scavenge 收集器与吞吐量关系密切，故也称为吞吐量优先收集器。</p>
<p><strong>特点：</strong></p>
<ul>
<li>新生代收集器</li>
<li>基于标记-复制算法实现</li>
<li>多线程收集器</li>
<li>吞吐量优先收集器（Parallel Scavenge收集器其他收集器不同在于：CMS等收集器的关注点是尽可能地<strong>缩短垃圾收集时用户线程的停顿时间</strong>， 而Parallel Scavenge收集器的目标则是<strong>达到一个可控制的吞吐量</strong>）</li>
<li>自适应调节策略（通过<code>+UseAdaptiveSizePolicy</code>参数激活）</li>
</ul>
<p><strong>GC自适应调节策略</strong>：Parallel Scavenge收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时不需要手动指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC的自适应调节策略。<br>Parallel Scavenge收集器使用两个参数控制吞吐量：</p>
<ul>
<li><code>-XX： MaxGCPauseMillis</code>参数：允许的值是一个大于0的毫秒数， 收集器将尽力保证内存回收花费的时间不超过用户设定值。</li>
<li><code>-XX： GCTimeRatio</code>参数：一个大于0小于100的整数， 也就是垃圾收集时间占总时间的比率， 相当于吞吐量的倒数。 </li>
<li><code>+UseAdaptiveSizePolicy</code>参数：这是一个开关参数， 当这个参数被激活之后， 就不需要人工指定新生代的大小（-Xmn） 、 Eden与Survivor区的比例（-XX： SurvivorRatio） 、 晋升老年代对象大小（-XX：PretenureSizeThreshold） 等细节参数了， 虚拟机会根据当前系统的运行情况收集性能监控信息，<strong>动态调整</strong>这些参数以提供最合适的停顿时间或者最大的吞吐量。只需要把基本的内存数据设置好（如-Xmx设置最大堆），然后使用<code>-XX： MaxGCPauseMillis</code>参数（更关注最大停顿时间）或<code>-XX： GCTimeRatio</code>（更关注吞吐量） 参数给虚拟机设立一个优化目标， 那具体细节参数的调节工作就由虚拟机完成了。</li>
</ul>
<h3 id="4-Serial-Old"><a href="#4-Serial-Old" class="headerlink" title="4.Serial Old"></a>4.Serial Old</h3><p>Serial Old是Serial收集器的老年代版本</p>
<p><strong>特点：</strong></p>
<ul>
<li>单线程收集器</li>
<li>使用标记-整理算法</li>
<li>主要在<strong>客户端模式</strong>下使用。如果在<strong>服务端模式</strong>下，它也可能有两种用途： 一种是在JDK 1.5以及之前的版本中与Parallel Scavenge收集器搭配使用，另外一种就是作为CMS收集器发生失败时的后备预案，<strong>在并发收集发生Concurrent Mode Failure时使用</strong>。</li>
</ul>
<p>Serial / Serial Old收集器工作过程图（Serial收集器图示相同）：<br><img src="https://s2.loli.net/2022/05/06/9WZCBSvKyzsQO2X.png"></p>
<h3 id="5-Parallel-Old"><a href="#5-Parallel-Old" class="headerlink" title="5.Parallel Old"></a>5.Parallel Old</h3><p>Parallel Old是Parallel Scavenge收集器的老年代版本。<strong>JDK 1.6中发布</strong>。</p>
<p><strong>特点：</strong></p>
<ul>
<li>多线程并发收集</li>
<li>使用标记-整理算法</li>
</ul>
<p>​    <strong>应用场景</strong>：注重高吞吐量以及CPU资源敏感的场合，都可以优先考虑Parallel Scavenge+Parallel Old 收集器。<br>Parallel Scavenge/Parallel Old收集器工作过程图：</p>
<p><img src="https://s2.loli.net/2022/05/06/axL4crnMeGCAqO2.png" alt="parnew"></p>
<h3 id="6-CMS收集器"><a href="#6-CMS收集器" class="headerlink" title="6.CMS收集器"></a>6.CMS收集器</h3><p>CMS收集器是一种以获取最短回收停顿时间为目标的收集器。<strong>JDK1.5中发布</strong>。<br>     <strong>特点：</strong></p>
<ul>
<li>老年代的收集器</li>
<li>使用标记-清除算法</li>
<li>第一款真正意义上支持并发的垃圾收集器，首次实现了让垃圾收集线程与用户线程（基本上）同时工作（并发收集）</li>
<li>以获取<strong>最短回收停顿时间</strong>为目标的收集器（低停顿）</li>
</ul>
<p>​      <strong>应用场景：</strong>：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如web程序、b/s服务。</p>
<p><strong>收集流程：</strong></p>
<p>CMS整个过程的四个步骤如下，其中初始标记、 重新标记这两个步骤仍然需要“Stop The World”。</p>
<ol>
<li><strong>初始标记</strong>-仅仅只是标记一下GC Roots能直接关联到的对象，速度很快</li>
<li><strong>并发标记</strong>-从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行</li>
<li><strong>重新标记</strong>-为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些， 但也远比并发标记阶段的时间短</li>
<li><strong>并发清除</strong>-清理删除掉标记阶段判断的已经死亡的对象， 由于不需要移动存活对象， 所以这个阶段也是可以与用户线程同时并发的</li>
</ol>
<p> CMS收集器的工作过程图：<br><img src="https://s2.loli.net/2022/05/06/FeAwaDb5JL3ZNgV.png"></p>
<p><strong>缺点：</strong></p>
<ul>
<li>CMS 收集器<strong>对处理器资源非常敏感</strong>。事实上，面向并发设计的程序都对处理器资源比较敏感。在并发阶段，它虽然不会导致用户线程停顿，但却会因为占用了一部分线程而导致应用程序变慢，降低总吞吐量。</li>
<li>由于CMS收集器<strong>无法处理“浮动垃圾”</strong>， 有可能出现“Con-current Mode Failure”失败进而导致另一次完全“Stop The World”的Full GC的产生。</li>
<li>CMS是一款基于“标记-清除”算法实现的收集器，这意味着收集结束时<strong>会有大量空间碎片产生</strong>，空间碎片过多时，将会给大对象分配带来很大麻烦，往往会出现老年代还有很多剩余空间， 但就是无法找到足够大的连续空间来分配当前对象， 而不得不提前触发一次Full GC的情况。</li>
</ul>
<blockquote>
<p><strong>关于CMS收集器浮动垃圾的说明：</strong><br>由于在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们， 只好留待下一次垃圾收集时再清理掉。这一部分垃圾就称为“浮动垃圾”。<br>由于在垃圾收集阶段用户线程还需要持续运行， 那就还需要预留足够内存空间提供给用户线程使用， 因此CMS收集器不能像其他收集器那样等待到老年代几乎完全被填满了再进行收集，<strong>必须预留一部分空间供并发收集时的程序运作使用</strong>。</p>
</blockquote>
<h3 id="7-G1-收集器（Garbage-First）"><a href="#7-G1-收集器（Garbage-First）" class="headerlink" title="7.G1 收集器（Garbage First）"></a>7.<strong>G1 收集器（Garbage First）</strong></h3><p><strong>特点：</strong></p>
<ul>
<li>将堆内存“化整为零”，开创了收集器面向局部收集的设计思路和基于Region的内存布局形式</li>
<li>面向全堆的收集器，不再需要其他新生代收集器的配合工作</li>
<li>主要面向服务端应用的垃圾收集器</li>
<li>G1 仍是遵循分代收集理论设计的， 但其堆内存的布局与其他收集器有非常明显的差异</li>
<li>G1 不再坚持固定大小以及固定数量的分代区域划分，而是把连续的Java堆划分为多个大小相等的独立Region，每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间或者老年代空间</li>
<li>收集器能够对扮演不同角色的Region采用不同的策略去处理， 这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果</li>
<li>Region中还有一类特殊的Humongous区域， 专门用来存储大对象。 <strong>G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。</strong> 每个Region的大小可以通过参数<code>-XX： G1HeapRegionSize</code>设定， 取值范围为1MB～32MB， 且应为2的N次幂。 而对于那些超过了整个Region容量的超级大对象，将会被存放在N个连续的Humongous Region之中， G1的大多数行为都把Humongous Region作为老年代的一部分来进行看待</li>
<li>G1收集器之所以能建立可预测的停顿时间模型， 是因为它将Region作为单次回收的最小单元， 即每次收集到的内存空间都是Region大小的整数倍， 这样可以有计划地避免在整个Java堆中进行全区域的垃圾收集</li>
<li>G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小， 价值即回收所获得的空间大小以及回收所需时间的经验值， 然后在后台维护一个优先级列表， 每次根据用户设定允许的收集停顿时间（使用参数<code>-XX： MaxGCPauseMillis</code>指定， 默认值是200毫秒），优先处理回收价值收益最大的那些Region</li>
<li>可以由用户指定期望的停顿时间是G1收集器很强大的一个功能，设置不同的期望停顿时间， 可使得G1在不同应用场景中取得关注吞吐量和关注延迟之间的最佳平衡（默认的停顿目标为两百毫秒，通常把期望停顿时间设置为一两百毫秒或者两三百毫秒会是比较合理的）</li>
</ul>
<p>G1 收集器 Region 分区示意图如下：</p>
<p><img src="https://s2.loli.net/2022/05/06/5xLagzlejM63Zph.jpg" alt="img"></p>
<p>G1 收集器的运作过程主要步骤如下：</p>
<ul>
<li><strong>初始标记</strong>：<strong>仅仅只是标记一下GC Roots能直接关联到的对象</strong>，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。</li>
<li><strong>并发标记</strong>：<strong>从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象</strong>，这阶段耗时较长，但可与用户程序并发执行。<strong>当对象图扫描完成以后，还要重新处理SATB记录下的在并发时有引用变动的对象。</strong></li>
<li><strong>最终标记</strong>：对用户线程做另一个短暂的暂停，用于<strong>处理并发阶段结束后仍遗留下来的最后那少量的SATB记录。</strong></li>
<li><strong>筛选回收</strong>： 负责更新Region的统计数据，对各个Region的回收价值和成本进行排序， 根据用户所期望的停顿时间来制定回收计划， 可以自由选择任意多个Region构成回收集，然后<strong>把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间</strong>。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多条收集器线程并行完成的。</li>
</ul>
<p>从上述阶段的描述可以看出， G1收集器除了并发标记外， 其余阶段也是要完全暂停用户线程的，换言之， 它并非纯粹地追求低延迟， <strong>官方给它设定的目标是在延迟可控的情况下获得尽可能高的吞吐量。</strong></p>
<p>G1 收集器运行示意图如下：</p>
<p><img src="https://s2.loli.net/2022/05/06/9TBaQpjKJLEYzOH.jpg" alt="img"></p>
<h2 id="4-G1-收集器与-CMS-收集器的异同"><a href="#4-G1-收集器与-CMS-收集器的异同" class="headerlink" title="4.G1 收集器与 CMS 收集器的异同"></a>4.<strong>G1 收集器与 CMS 收集器的异同</strong></h2><ul>
<li>两者都非常关注停顿时间的控制</li>
<li>G1 可以指定最大停顿时间、 分Region的内存布局、 按收益动态确定回收集</li>
<li>与CMS的“标记-清除”算法不同，<strong>G1从整体来看是基于“标记-整理”算法实现的收集器，但从局部（两个Region之间）上看又是基于“标记-复制”算法实现</strong>，无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，垃圾收集完成之后能提供规整的可用内存。这种特性有利于程序长时间运行，在程序为大对象分配内存时不容易因无法找到连续内存空间而提前触发下一次收集</li>
<li><strong>G1和CMS都使用卡表来处理跨代指针</strong>，但G1的卡表实现更为复杂，而且堆中每个Region，无论扮演的是新生代还是老年代角色，都必须有一份卡表，这导致<strong>G1的记忆集（和其他内存消耗）可能会占整个堆容量的20%乃至更多的内存空间</strong>，而CMS的卡表就相当简单，只有唯一一份， 只需要处理老年代到新生代的引用， 反过来则不需要</li>
<li>它们都使用到写屏障，CMS用写后屏障来更新维护卡表；而G1除了使用写后屏障来进行同样的（由于G1的卡表结构复杂，其实是更烦琐的）卡表维护操作外，为了实现原始快照搜索（SATB）算法，还需要使用写前屏障来跟踪并发时的指针变化情况。相比起增量更新算法，<strong>原始快照搜索能够减少并发标记和重新标记阶段的消耗</strong>，避免CMS那样在最终标记阶段停顿时间过长的缺点，但是在用户程序运行过程中确实会产生由跟踪引用变化带来的额外负担。</li>
</ul>
<h2 id="5-垃圾收集器常用参数说明"><a href="#5-垃圾收集器常用参数说明" class="headerlink" title="5.垃圾收集器常用参数说明"></a>5.<strong>垃圾收集器常用参数说明</strong></h2><ul>
<li>UseSerialGC：客户端模式下默认值，使用Serial+Serial old收集器组合进行回收</li>
<li>UseParNewGC：<strong>JDK9之后不再支持</strong>，使用ParNew+Serial old收集器组合进行回收</li>
<li>UseConcMarkSweepGC：<strong>JDK 9之前Server模式下的默认值</strong>，使用ParNew + CMS + Serial Old收集器组合进行回收，Serial Old收集器将作为CMS收集器出现“Concurrent Mode Failure“失败后的后备收集器使用</li>
<li>UseParallelGC：使用Parallel Scavenge + Serial Old (PS MarkSweep)收集器组合进行回收</li>
<li>UseParallelOldGC：使用Parallel Scavenge + Parallel Old收集器组合进行回收</li>
<li>SurvivorRatio：指定新生代中Eden区域与Survivor区域的容量比值，默认为8，代表Eden:Survivor=8:1</li>
<li>PretenureSizeThreshold：直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配</li>
<li>MaxTenuringThreshold：晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄就增加1，当超过这个参数值时就进入老年代</li>
<li>UseG1GC：使用G1收集器，<strong>这个是JDK 9后的Server模式默认值</strong></li>
<li>G1HeapRegionSize=n：设置Region大小，并非最终值</li>
<li>MaxGCPauseMillis：设置G1收集过程目标时间，默认值是200ms，不是硬性条件</li>
<li>GINewSizePercent：设置G1新生代最小值，默认值是5%</li>
<li>GIMaxNewSizePercent：设置GG1新生代最大值，默认值是60%</li>
</ul>
<h2 id="6-垃圾收集器总结"><a href="#6-垃圾收集器总结" class="headerlink" title="6.垃圾收集器总结"></a>6.垃圾收集器总结</h2><p><img src="https://s2.loli.net/2022/05/06/TZJrMKwncV9lzyP.jpg" alt="preview"></p>
<h2 id="7-参考文章"><a href="#7-参考文章" class="headerlink" title="7.参考文章"></a>7.参考文章</h2><p>1.浅析经典JVM垃圾收集器(<a href="https://zhuanlan.zhihu.com/p/481256418">https://zhuanlan.zhihu.com/p/481256418</a>)</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>垃圾收集器</tag>
      </tags>
  </entry>
</search>
